{"pages":[{"title":"schedule","text":"","link":"/schedule/"}],"posts":[{"title":"Change String: Time Switch","text":"##Transfer 12-hour mode to 24-hour modeThis problem is easy but there are still many small tips we should notice: Type Switch String to char: s.toCharArray(); char to String: String.valueOf(char); String to int: Integer.parseInt(String); int to String: String.valueOf(char); char to int: can’t directly change!!! Integer.parseInt(String.valueOf(char)); int to char: (char)a; Small tip: substring()substring(a): return String from index a to length - 1; substring(a, b): return from index a to index b-1.","link":"/2022/01/29/Change-String-Time-Switch/"},{"title":"This is my First Post","text":"Very happy!Today I build up my blog!Main purpose of my blog are Record the my experience of leearning computer science. Record my life. I think we can’t study witout life since we live in such a beautiful world!Life is not only for study, but also happy, sad, family, friendship and love. I’ll be glad if someone read my blog and get some help.","link":"/2022/01/24/My-New-Post/"},{"title":"Print Possibility","text":"Today! I received the OA from TikTOk, I’ll do it in 02/07 next month. I must try my best to prepare for it.This blog will record some small tips when I write Java code. Small but confusing mistake. How to print a decimal number like 2.5000, with three 0 after 5?—–&gt;use printf, float positive = 0; System.out.printf(“%.6f”, positive/arr.size()); Be careful that sum may cause Integer overflow, so try to use long type!! Given a array nums[], we use nums.length to get length and nums[i] to get the element in index i. Given a Listnums, &lt;&gt;inside must be a reference type like Integer, String, Double —–&gt;we use nums.size() to get the numebr of elements and nums.get(i) to get element in index i. Important use of ArrayList!!! Basic: add(), set(), remove(), clone(), isEmpty() contains(k)–directly find if a k is in List. indexOf(k)–directly return the index of k in List toArray()–transfer List to array. toString()–transfer List to String. sort() directly sort all elements in the List!!! Important use of LinkedList!!! Basic: addFirst(), addLast(), add element in the beginning and end of LInkedList removeFirst(), removeLast(), remove(index), get(index), contains() dont use normal for loop, use enhanced for loop: for (String i : sites) { function(i) }","link":"/2022/01/27/Print-Possibility/"},{"title":"Two Sum","text":"This is a question that we should return two indices of a given array to reach a given sum.Example: nums = {1, 2, 4, 6}, sum = 6 =&gt; index = [1, 2] There are two ways to solve this problem: Brute Force: use two for-loop, this one is esay but has a time complexity of O(n^2), which is not efficient. Smart one: use HashMap Use a hashmap to store the indices of the elements that are already visited For a given input array this algorithm does the following steps: Create a hashmap which accepts integer datatype as key and value. Iterate through each element in the given array starting from the first element. In each iteration check if required number (required number = target sum - current number) is present in the given array. If present, return {required number index, current number index} as result. Otherwise add the current iteration number as key and its index as value to the hashmap. Repeat this until you find the result. Array looks like 1 2 3 4HashMap looks like 1:0 2:1 3:2 4:3 former is value and latter is index Time complexity is O(n) public class Solution {&emsp;public int[] twoSum(int[] numbers, int target) {&emsp;&emsp;HashMap&lt;Integer,Integer&gt; indexMap = new HashMap&lt;Integer,Integer&gt;();&emsp;&emsp;for(int i = 0; i &lt; numbers.length; i++){&emsp;&emsp;&emsp;Integer requiredNum = (Integer)(target - numbers[i]);&emsp;&emsp;&emsp;if(indexMap.containsKey(requiredNum)){&emsp;&emsp;&emsp;&emsp;int toReturn[] = {indexMap.get(requiredNum), i};&emsp;&emsp;&emsp;&emsp;return toReturn;&emsp;&emsp;&emsp;}&emsp;&emsp;&emsp;indexMap.put(numbers[i], i);&emsp;&emsp;}&emsp;return null;&emsp;}} BTW: Attach codes for Hashset to compareHashSet set = new HashSet&lt;&gt;(); for(Integer i: a){ if(!set.add(i)){ set.remove(i); } } for(Integer i: set){ return i; } return -1;","link":"/2022/01/25/Two-Sum/"},{"title":"leetcode","text":"This is a blog to record my experience of solving leetcode problems. I want to work in algorithms in the future. So I plan to solve one problem everyday in leetcode websiteand record what I learned here. I know some problemss may look like silly but I’ll still record.Being silly in practice is better than in work. Keep this habit!","link":"/2022/01/24/leetcode/"},{"title":"System Design","text":"Operating SystemsI’m learning system design and want to post a overview about operating system based on my understanding: File Systems, Virtual Memory, Memory Paging, and Instruction Execution CycleTable of Contents Introduction File Systems Virtual Memory Memory Paging Instruction Execution Cycle Conclusion Introduction An Operating System (OS) is the most crucial program that runs on a computer. It manages the computer’s memory, processes, and all of its software and hardware. It also facilitates communication between the user and the hardware components of the system. Today, we will delve deeper into four key aspects of an OS: File Systems, Virtual Memory, Memory Paging, and the Instruction Execution Cycle. File Systems A file system is a method and data structure that the OS uses to manage files on a disk or partition. It controls how data is stored and retrieved on a disk. Types of file systems include FAT32, NTFS, HFS+, ext4, etc. Each has different features, performance, security, and capacity handling characteristics. I’ve done a File system project in my operating system class. Virtual Memory Virtual memory is a memory management technique used by the OS which gives an application the impression that it has a large, contiguous working memory, while in fact, it might be fragmented and may overflow onto disk storage. It makes the application independent of the physical memory’s actual size. Memory Paging Paging is a memory management scheme implemented by the OS to enable the physical memory’s efficient utilization. It allows the physical address space of a process to be non-contiguous, breaking physical memory into fixed-size blocks called frames and logical memory into blocks of the same size called pages. Instruction Execution Cycle The Instruction Execution Cycle, also known as the fetch-decode-execute cycle, is the basic operational process of a computer. It is the process by which a computer retrieves a program instruction from its memory, determines what actions the instruction requires, and carries out those actions. Conclusion Operating systems are integral to computing. They manage various tasks to allow users to interact seamlessly with their hardware. Understanding the key aspects of an OS such as file systems, virtual memory, memory paging, and the instruction execution cycle can help users and developers leverage the OS for optimized performance.","link":"/2023/07/17/OperatingSystem/"},{"title":"Northwestern University","text":"Today I receive a Master of computer science offer from Northwestern University!!! I’m proud to take the offer and go to this Top10 university in United States.","link":"/2022/10/24/offer/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","link":"/tags/Leetcode/"},{"name":"Computer","slug":"Computer","link":"/tags/Computer/"},{"name":"Life","slug":"Life","link":"/tags/Life/"}],"categories":[{"name":"Leetcode","slug":"Leetcode","link":"/categories/Leetcode/"},{"name":"Computer","slug":"Computer","link":"/categories/Computer/"},{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"Small Mistake","slug":"Leetcode/Small-Mistake","link":"/categories/Leetcode/Small-Mistake/"},{"name":"HashMap","slug":"Leetcode/HashMap","link":"/categories/Leetcode/HashMap/"},{"name":"String, Char, int","slug":"Leetcode/String-Char-int","link":"/categories/Leetcode/String-Char-int/"},{"name":"System Design","slug":"System-Design","link":"/categories/System-Design/"}]}